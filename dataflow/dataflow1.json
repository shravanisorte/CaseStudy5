{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sink",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "filter1",
					"description": "!isNull(PlantID) \n&& !isNull(DeviceID) \n&& !isNull(Temperature_C) \n&& Status in ('OK','WARNING','ALERT')\n"
				},
				{
					"name": "sort1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PlantID as string,",
				"          DeviceID as string,",
				"          {Timestamp (UTC)} as string,",
				"          Temperature_C as string,",
				"          Humidity_pct as string,",
				"          Vibration_mm_s as string,",
				"          Pressure_bar as string,",
				"          Energy_kWh as string,",
				"          Status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source2 filter(toDouble(Temperature_C) > 70",
				"&& toDouble(Vibration_mm_s) > 2.0) ~> filter1",
				"filter1 sort(asc(Temperature_C, true),",
				"     asc(Humidity_pct, true),",
				"     asc(Vibration_mm_s, true)) ~> sort1",
				"sort1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}